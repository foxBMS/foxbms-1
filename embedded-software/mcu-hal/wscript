#!/usr/bin/env python
# -*- coding: utf-8 -*-

# @copyright &copy; 2010 - 2021, Fraunhofer-Gesellschaft zur Foerderung der
#   angewandten Forschung e.V. All rights reserved.
#
# BSD 3-Clause License
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1.  Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
# 3.  Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from this
#     software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# We kindly request you to use one or more of the following phrases to refer to
# foxBMS in your hardware, software, documentation or advertising materials:
#
# &Prime;This product uses parts of foxBMS&reg;&Prime;
#
# &Prime;This product includes parts of foxBMS&reg;&Prime;
#
# &Prime;This product is derived from foxBMS&reg;&Prime;


import os


def build(bld):
    srcs = ' '.join([
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_adc.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_adc_ex.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_can.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_cortex.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_dma.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_ll_fmc.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_flash.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_flash_ex.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_gpio.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_iwdg.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_pwr.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_pwr_ex.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_rcc.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_rcc_ex.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_rtc.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_rtc_ex.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_sdram.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_spi.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_tim.c'),
           os.path.join(bld.env.CPU_MAJOR + '_HAL_Driver', 'Src', 'stm32f4xx_hal_uart.c')])

    includes = os.path.join(bld.bldnode.abspath()) + ' '
    includes += bld.env.hal_dirs + ' '
    includes += ' '.join([
                bld.path.get_src().abspath(),
                os.path.join(bld.top_dir, bld.env.es_dir, bld.env.mcu_dir, 'src', 'general', 'config'),
                os.path.join(bld.top_dir, bld.env.es_dir, bld.env.mcu_dir, 'src', 'general', 'config', bld.env.CPU_MAJOR)])

    bld.stlib(target='foxbms-stmhal',
              source=srcs,
              includes=includes,
              cflags=bld.env.CFLAGS_hal,
              features=['size', 'check_includes'])
